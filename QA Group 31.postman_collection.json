{
	"info": {
		"_postman_id": "85e79c36-70b6-4f3b-a754-69bfe3b64b05",
		"name": "QA Group 31",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21888454"
	},
	"item": [
		{
			"name": "HW_part_1_/get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/get_method?name=Oleksandr&age=38",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr"
						},
						{
							"key": "age",
							"value": "38"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_part_1_/user_info_3",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Oleksandr",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr",
							"disabled": true
						},
						{
							"key": "age",
							"value": "38",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_part_1_/object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_1?name=Oleksandr&age=38&weight=68",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "weight",
							"value": "68"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_part_1_/object_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name=Oleksandr&age=38&salary=30000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "30000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_part_1_/object_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name=Oleksandr&age=38&salary=30000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "30000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_part_1_/object_info_4",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Oleksandr&age=38&salary=30000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "30000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_part_1_/user_info_2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Oleksandr",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr",
							"disabled": true
						},
						{
							"key": "age",
							"value": "38",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_part_2_/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/first",
					"host": [
						"{{URL}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_part_2_/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name_response = Name_request_ByHand\", function () { \r",
							"    pm.expect(resp.name).to.eql(\"Oleksandr\");\r",
							"});\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name_response = Name_request_ByHand\", function () { \r",
							"    pm.expect(JsonData.name).to.eql(\"s\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age_response = Age_request_ByHand\", function () {\r",
							"    pm.expect(resp.age).to.eql(\"38\");\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary_response = Salary_request_ByHand\", function () {\r",
							"    pm.expect(resp.salary).to.eql(2700);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_response = Name_request_Name_from_request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_response = Age_request_Age_from_request\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_req = +req.salary\r",
							"pm.test(\"Salary_response = Salary_request_Salary_from_request\", function () {\r",
							"    pm.expect(resp.salary).to.eql(salary_req);\r",
							"});\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"pm.test(\"Console_family_response\", function () {\r",
							"    console.log(\"Family :\",resp.family);\r",
							"});\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary_1_5_year_req_4 = 4 * req.salary\r",
							"pm.test(\"u_salary_1_5_year_response = u_salary_1_5_year_request\", function () {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(u_salary_1_5_year_req_4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Oleksandr",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/user_info_3",
					"host": [
						"{{URL}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_part_2_/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"console.log(\"Response :\", resp)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"// Парсинг ответа в объект:\r",
							"let req = pm.request.url.query.toObject();\r",
							"console.log(\"Request :\", req)\r",
							"// Парсинг ответа в массив:\r",
							"// let request_to_array = pm.request.url.query.all()\r",
							"// console.log(\"Request :\", request_to_array)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_response = Name_request_name_from_request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"// Сравнение по ячейкам в массиве из ответа (затягивали ответ в массив - ...query.all)\r",
							"// pm.test(\"Name from responce (array) = name from request\", function(){\r",
							"//     pm.expect(request_to_array[0].value).to.equal(resp.name);\r",
							"// });\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_response = Age_request_age_from_request\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary_response = Salary_request_salary_from_request\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family :\", resp.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog have a name\", function () {\r",
							"    pm.expect(resp.family.pets.dog).haveOwnProperty(\"name\")\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog have an age\", function () {\r",
							"    pm.expect(resp.family.pets.dog).haveOwnProperty(\"age\")\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog`s name is Luky\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 2-й вариант:\r",
							"tests[\"What is the dog's name\"] = resp.family.pets.dog.name == \"Luky\";\r",
							"\r",
							"// Проверка по частичному совпадению:\r",
							"// pm.test(\"Dog`s name contain 'Lu' \", function () {\r",
							"//     pm.expect(resp.family.pets.dog.name).to.include(\"Lu\");\r",
							"// });\r",
							"\r",
							"// 12. Проверить, что параметр age (собаки) имеет значение 4.\r",
							"pm.test(\"A dog is 4 years old\", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Oleksandr",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/object_info_3",
					"host": [
						"{{URL}}"
					],
					"path": [
						"object_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_part_2_/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"console.log(\"Response :\", resp)\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"console.log(\"Request :\", req)\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_response = Name_request_name_from_request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age_response = Age_request_age_from_request\", function () {\r",
							"    pm.expect(resp.age).to.eql(+req.age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary from request :\", +req.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Salary from response :\", resp.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Salary [0] from response :\", resp.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary [1] from response :\", +resp.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary [2] from response :\", +resp.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary [0] from response = Salary from request\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"// console.log(typeof req.salary[0])\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary [1] from response = Salary from request*2\", function () {\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary [2] from response = Salary from request*3\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"let name = req.name\r",
							"pm.environment.set(\"name\", name);\r",
							"// 19. Передать в окружение переменную age\r",
							"let age = req.age\r",
							"pm.environment.set(\"age\", age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"let salary = req.salary\r",
							"pm.environment.set(\"salary\", salary);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"// console.log(\"Цикл:\")\r",
							"for(var i=0; i<resp.salary.length ; i++)\r",
							"{\r",
							"console.log(resp.salary[i])   \r",
							"}\r",
							"\r",
							"// 2-й вариант\r",
							"// for (item in resp.salary){\r",
							"//     console.log(resp.salary[item])\r",
							"// }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/object_info_4?name=Oleksandr&age=38&salary=2000",
					"host": [
						"{{URL}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_part_2_/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5007/user_info_2\r",
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response have : start_qa_salary\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"start_qa_salary\")\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response have : qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_6_months\")\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response have : qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_12_months\")\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response have : qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response have : qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response have parameter : person\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"person\")\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Start QA salary from response = Start QA salary from request\", function () {\r",
							"    pm.expect(resp.start_qa_salary_req).to.eql(req.start_qa_salary_req);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"QA salary after 6 months from response = QA salary from request * 2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"QA salary after 12 months from response = QA salary from request * 2.7\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"QA salary after 1.5 year from response = QA salary from request * 3.3\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"QA salary after 3.5 year from response = QA salary from request * 3.8\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1] from response = Salary from request\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age from response = Age from request\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"QA salary after 5 years from response = QA salary from request * 4.2\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for(let i in resp.person)\r",
							"    { \r",
							"    console.log(i)\r",
							"    console.log(resp.person[i])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/user_info_2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr",
							"disabled": true
						},
						{
							"key": "age",
							"value": "38",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}